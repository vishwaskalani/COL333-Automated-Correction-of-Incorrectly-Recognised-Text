Assignment I: Automated Correction of Incorrectly Recognised Text
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Team member 1 - Vedant Mukesh Deo	Entry Number - 2020CS10408
Team member 2 - Vishwas Kalani		Entry Number - 2020CS10411
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
**Idea of Algorithm submitted**
1) Since the path to goal state is not important, our algorithm is a kind of local search. It evaluates and 
    modifies one or more current states rather than systematically exploring paths from an initial state.
2) The values corresponding to each key in the confusion matrix depict the possible replacements of
    any character in the correct or minimal cost file, so first we created an inverse confusion matrix so 
    that we could define our operations on current states using the inverse confusion matrix
3) The number of neighbours corresponding to each state is exponential in number therefore it is important
    to ensure that we expand only those nodes in the frontier where the goal state is most likely to be.
4) We pruned our state space construction by considering changes in a word of sentence instead of
    entire sentence. We have used the cost_fn function to check cost of each neighbour. We move locally to
    the least costly neighbour.
5) In each iteration of our algorithm, we perform the following steps:
    a) Correcting or improving words with maximum 2 incorrect characters moving from first word to last
    b) Correcting or improving words with maximum 2 incorrect characters moving from last word to first
    c) Checking words which have plateau in state space for 2 characters change
    d) Correcting or improving words found from (c) with maximum 3 incorrect characters  
    e) We are maintaining an array to check which words and characters have been changed so that we don't 
       replace a character which has already been replaced.
6) We are repeating all points 5 a) to 5 e) so that the words with more than 3 incorrect charcters which 
    have improved from an iteration of algorithm will again go through the iteration to improve further.
7) The efficacy of repeating the iterations of our algorithm depends on the quality of cost function as 
    per the problem structure. For instance, if a word "significance" is misread as "zagnifacanca", then 
    first iteration of our algorithm would try multiple 3 character change combinations. If the cost of 
    words like "zignificance" or "significanca" is lower than original wrong word, then our algo will 
    pick them and correct them in next iteration.
8) Since any cost function for this problem structure would use the meaning of the word in its vicinity, 
     we iterated in a sequential manner instead of random order so that correction of 
     neighbouring words can increase the chances of correction of a word. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
**Analysis of algorithm**
1) Representation for the state : Each unique sentence represents a state
2) Operator : There exists an edge between two states in the state space generated by our algorithm if they
    differ in maximum 3 characters in any word. Each iteration of our algoithm checks these neighbours and
    generates next level.
3) Transition costs : We are evaluating all the possible words of a given word (assuming max 3 char changes 
    in an iteration)
4) Notion of a goal : The sentence with minimum cost is the goal state. If making a change in the sentence
    reduces the cost then our algorithm moves towards that state.
5) Branching : Let there be `m` words in a sentence with `n' characters in the longest word, `k` maximum
    replacements of a character in confusion matrix. Thus branching factor is m*(nC1*k + nC2*k*k + nC3*k*k*k)

